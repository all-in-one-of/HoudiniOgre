/*
 * PROPRIETARY INFORMATION.  This software is proprietary to
 * Side Effects Software Inc., and is not to be reproduced,
 * transmitted, or disclosed in any way without written permission.
 *
 * Produced by:
 *      Side Effects
 *      123 Front St. West,
 *      Suite 1401
 *      Toronto, Ontario
 *      Canada M5J 2M2
 *      Tel: (416) 504 9876
 *
 *   NAME:	SOP library (C++)
 *
 *   COMMENTS:	A SOP that allows use to create a sphere or a cube
 *              according to the will of the user.
 *              It is based on the previous example mySphere.C. We had
 *              few options to create a cube, and some extra parameters
 *              to choose between a sphere and a cube and control the size
 *              of the cube. We also have an example to disable a parameter
 */

// Some headers are needed
#include <UT/UT_DSOVersion.h>      // every DSO needs this header.
#include <PRM/PRM_Include.h>       // we will include some parameters 
#include <OP/OP_Operator.h>        // we are creating a new OP
#include <OP/OP_OperatorTable.h>   // and we need to register it in Houdini.

// headers we needed for the standalone application.
#include <UT/UT_Math.h>
#include <GU/GU_Detail.h>

#include "SOP_mySphereCube.h"

// Where the new Operator will be defined.
// new entries to the operator table for a given type of network. 
// Each entry in the table is an object of class OP_Operator which 
// basically defines everything Houdini requires in order to create nodes of the new type

void
newSopOperator(OP_OperatorTable *table)
{
    table->addOperator(new OP_Operator("myspherecube",                     // The short operator name need for Houdini
				       "mySphereCubeCube",                     // Readable version of the name(for menus and such)
				       SOP_mySphereCube::myConstructor,    // method which constructs nodes of this type
				       SOP_mySphereCube::myTemplateList,   // A list of the templates defining the parameters to this operator.
	                               0,                              // Minimum  number of inputs required
		                       0,                              // maximum number of inputs required
		                       0));    // A list of any local variables used by the operator
		  
}

// parameters labelling
static PRM_Name        names[] = 
{
    // division = short parameter name recognized by Houdini
    // Division X/Y/Z is a more readable label for the user.
    PRM_Name("division",  "Division X/Y/Z"),
    // label for the menu between a sphere and a cube
    PRM_Name("geometry",  "Geometry"),
    PRM_Name("size",      "Size"),

};


// declare some defaults values for the divisions parmater.
// If nothing is set, the default values will be zero.
static PRM_Default     divDefaults[] = 
{
    // we set a default for each component.
    PRM_Default(20), PRM_Default(40), PRM_Default(20)
};

// Create items for the menu
static PRM_Name optMenuName[] = {
    PRM_Name("sphere", "Sphere"),
    PRM_Name("cube",   "Cube"),
};

// Create the actual menu using the item declared above
static PRM_ChoiceList optMenu((PRM_ChoiceListType)
    (PRM_CHOICELIST_EXCLUSIVE | PRM_CHOICELIST_REPLACE), optMenuName);


// we can limit the user to set the divisions according to a range.
// Check PRM_Range.h for the options.
PRM_Range  divRange(PRM_RANGE_RESTRICTED, 0, PRM_RANGE_RESTRICTED, 100);
PRM_Range  sizeRange(PRM_RANGE_RESTRICTED, 0.001 );

// TemplateList will be where all the parameters are defined.
PRM_Template
SOP_mySphereCube::myTemplateList[] = {

    // PRM_XYZ: Parameter type XYZ see $HFS/toolkit/html/op/prm.html
    // for the different types available
    // 3: it has 3 components, X, Y and Z.
    // &names[0]: we will associate the first PRM_NAME declared above (index 0 and so on).
    // PRM_Template can take more parameters, see PRM_Template.h
    PRM_Template(PRM_XYZ,    3, &names[0], divDefaults, 0, &divRange ),
    // The menu
    PRM_Template(PRM_ORD,    1, &names[1], PRMzeroDefaults, &optMenu),
    // The size - PRMoneDefaults a variable declared PRM_Shared.h
    PRM_Template(PRM_FLT,    1, &names[2], PRMoneDefaults,  0, &sizeRange ),

};


// We will disable the parameter size when the sphere is chosen.
unsigned
SOP_mySphereCube::disableParms()
{
    unsigned changed = 0;

    changed  = enableParm(2, !OPTIONS()); // Turn size off if option is 0 (sphere)
    changed += enableParm(2,  OPTIONS()); // Turn size on  if option is 1 (cube)

    return changed;
}




// Node Constructor 
OP_Node *
SOP_mySphereCube::myConstructor( OP_Network *net, const char *name, OP_Operator *op )
{
    return new SOP_mySphereCube(net, name, op);
}

// Constructor for mySphereCube
SOP_mySphereCube::SOP_mySphereCube( OP_Network *net, const char *name, OP_Operator *op )
    : SOP_Node(net, name, op)
{}

// Destructor
SOP_mySphereCube::~SOP_mySphereCube() {}


// We include our sphere function here.
static
float sphere(const UT_Vector3 &p)
{
    float        x, y, z;
    x = p.x();
    y = p.y();
    z = p.z();

    return x*x + y*y + z*z- 1;
}


// Main where all the "cooking" will happen.
OP_ERROR
SOP_mySphereCube::cookMySop(OP_Context &context)
{ 
    // we include what was in the main() here.

    UT_BoundingBox        bbox;
    
    // This time we have divx, divy and divz as parameters.
    int                   divx, divy, divz, option;
    float                 size, now;
    
    // This is the way to get the current time.
    now = context.myTime;

    // Evaluate the values from the fields.
    divx = DIVX();
    divy = DIVY();
    divz = DIVZ();
     
    // Evaluate the option from the menu
    // Sphere will return 0
    // Cube   will return 1
    // if we have more options they will be indexed 0,1,2,3..n etc
    option = OPTIONS();
    
    switch( option ) 
    {
    case 0:  // the sphere is chosen
	
	// Iniatilize the gdp to make sure we will have a clean
	// geometry everytime we change the menu	
	gdp->clearAndDestroy();

	bbox.initBounds(   -1, -1, -1 );
	bbox.enlargeBounds( 1,  1,  1 );

	// build the geometry.
	gdp->polyIsoSurface(sphere, bbox, divx, divy, divz);

	break;
	
    case 1: // the cube is chosen.

	gdp->clearAndDestroy();
	
        // Evaluate size;
	size  = SIZE( now );
	
    
	// create a cube with the given divisions and size. 
	// See polymeshCub() in GU_Detail.h to see what arg you 
	// can modify
	gdp->polymeshCube( divx, divy, divz, 
			   -size, size,  // xmin and xmax
			   -size, size,  // ymin and ymax
			   -size, size); // zmin and zmax

	break;
    }	
  
    return error();
}
